https://github.com/GoogleCloudPlatform/gcsfuse
https://docs.google.com/document/d/1w7elNvAGAt_YU8ygiie5m-zZz5kdFozmClf_trTbJt4/edit


https://docs.docker.com/engine/install/ubuntu/
https://docs.docker.com/engine/install/linux-postinstall/


1) setup ubuntu
sudo apt-get update
// add account

sudo adduser aquaman01

sudo usermod -aG sudo $USER

systemctl status


2) Nginx

sudo apt-get install nginx
sudo nginx -v
http://34.152.7.6/   <your public ip>



3) ssl --- https://github.com/wmnnd/nginx-certbot   https://pentacent.medium.com/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71

https://www.youtube.com/watch?v=hxngRDmHTM0 ---proxy
or 4) ssl ----https://www.youtube.com/watch?v=X3Pr5VATOyA 
cd /etc/nginx/conf.d
sudo touch nbc-livestream-recording.laquarium.ca.conf
sudo mkdir /etc/nginx/ssl
// read and write
sudo chmod 700 /etc/nginx/ssl
// ssl certain key
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nbclivestream.key -out /etc/nginx/ssl/nbclivestream.crt

sudo nano /etc/nginx/conf.d/nbc-livestream-recording.laquarium.ca.conf
server {
        listen 80 default_server;
        server_name nbc-livestream.laquarium.ca;
        return 301 https://$server_name$request_uri;
}

server{
        listen 443 ssl;
        server_name nbc-livestream.laquarium.ca;

        ssl_certificate /etc/nginx/ssl/nbclivestream.crt;
        ssl_certificate_key /etc/nginx/ssl/nbclivestream.key;
        location / {
                root /usr/share/nginx.html;
                index index.html index.htm;
        }
}
sudo nginx -t

sudo nginx -s reload

sudo lsof -i -P -n | grep LISTEN
sudo nano /etc/nginx/nginx.conf

sudo nginx -t


sudo nano nginx.conf
sudo nginx -t
sudo nginx -s reload



// remove nginx
https://linuxconfig.org/how-to-remove-nginx-from-ubuntu
sudo apt-get purge nginx nginx-common
After using any of the above commands, use this in order to remove dependencies used by nginx which are no longer required.
sudo apt-get autoremove



5) docker
sudo apt install docker.io
sudo groupadd docker
sudo usermod -aG docker $USER

newgrp docker

sudo systemctl status docker
sudo apt install docker-compose

docker ps / docker container ls
docker restart <container_id>
docker logs <container_id>


ssh-keygen

**********************************************************************
Stop the container(s) using the following command:
docker-compose down
Delete all containers using the following command: -------docker system prune---delete not used


docker-compose down


docker rm -f $(docker ps -a -q)
docker rmi $(docker image  ls -q)
docker volume rm $(docker volume ls -q)
cd ..



sudo rm -r ~/.jitsi-meet-cfg/

sudo rm -r aquarium-livestream
git clone git@github.com:Whynotblue/aquarium-livestream.git

cd aquarium-livestream
git checkout stage-nbc-live
git pull origin stage-nbc-live

************
chmod +x init-letsencrypt.sh
sudo ./init-letsencrypt.sh
# Then manually run "chmod +x init-letsencrypt.sh" and "sudo ./init-letsencrypt.sh" on Google coud VM.

!!!!! docker cp /mnt/nosql-backup/20220429/data/ rankworks-nosql:/db-resotore

docker exec -i rankworks-nosql /usr/bin/mongorestore db-resotore/
************************
sudo docker-compose up --remove-orphans -d --build

sudo lsof -i -P -n | grep LISTEN
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



6) google storage
export GCSFUSE_REPO=gcsfuse-`lsb_release -c -s`
echo "deb http://packages.cloud.google.com/apt $GCSFUSE_REPO main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update
sudo apt-get install gcsfuse
gcsfuse nbc-livestream-recordings /home/aquaman01/aquarium-livestream/recordings
df -h

docker exec -it nginx-rtmp bash
df -h

gcsfuse nbc-livestream-recordings /home/rediffuseur/



sudo lsof -i -P -n | grep LISTEN
sudo lsof -n | egrep 'TCP.*LISTEN|UDP'

7) firewall
sudo ufw enable

sudo ufw allow 22 
sudo ufw allow 80
sudo ufw allow 443
sudo ufw allow 1935
sudo ufw status verbose

sudo nano /lib/systemd/system/ufw.service

[Unit]
Description=Uncomplicated firewall
Documentation=man:ufw(8)
DefaultDependencies=no
Before=network.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/lib/ufw/ufw-init start quiet
ExecStop=/lib/ufw/ufw-init stop

Restart=always
RestartSec=10s
[Install]
WantedBy=multi-user.target

 ps -ef |grep ufw

sudo systemctl enable ufw
systemctl is-enabled ufw

systemctl --type=service --no-legend
service --status-all
service ufw status

sudo /lib/ufw/ufw-init stop
sudo /lib/ufw/ufw-init start quiet

ps -axo pcpu,pmem,pid,command | grep ufw


In google cloud platform -> more actions -> view network details -> firewall 1)create a firewall rule2) assgin to VM 
check your ports: https://www.yougetsignal.com/tools/open-ports/
***********************8

scp filename1 filename2 qian@publicip:/home/qian

history -c
history 


https://cloud.google.com/compute/docs/networking/configure-vm-with-high-bandwidth-configuration

    prejoinPageEnabled: false,

sudo usermod -aG docker qian

opt = {
        agent: { 
            id: Math.floor(Math.random() * 500) + 1+"", 
            name: "agent" 
        },
        join_btn: "rankworks-join-btn",
        parentNode: "rankworks-conference-wrapper",
        api_username: "lucy-api",
        api_password: "j6ULe48h45@5"
    }


https://demo-lucy.laquarium.ca
https://api-lucy.laquarium.ca
https://conference-lucy.laquarium.ca

netstat -ao

https://www.youtube.com/watch?v=rNOGLLPXzwc
https://www.digitalocean.com/community/tutorials/how-to-use-ansible-to-automate-initial-server-setup-on-ubuntu-20-04

Mathieu GP
Mathieu GP says:
https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-scalable/
 
Mathieu GP says:
https://webrtc.org/
 
Mathieu GP says:
https://jitsi.org/jitsi-videobridge/
 
9:26
ryan
ryan says:
https://jitsi.org/security/#:~:text=Jitsi%20meetings%20in%20general%20operate,1%2Dto%2D1%20meetings
. 
9:32
Mathieu GP
Mathieu GP says:
https://github.com/jitsi/jitsi-videobridge/blob/master/doc/statistics.md


The aquarium is runing on p2p and jvb. both? both

How to switches from p2p to jvb if third partipant join to meeting? it is automatic or settings? auto

ls -lha public/jitsi_iframe


chown -R auqaman01:auqarium01 jitsi_iframe/

http://localhost:8000/mon-entreprise/meeting-room/1

The deployment is done using this Ansible role:
https://github.com/coderbunker/ansible-docker-nginx-rtmp-role
What the role does is prepare files needed to start the container using Docker Compose:
https://github.com/coderbunker/ansible-docker-nginx-rtmp-role/blob/main/tasks/main.yml#L31
https://github.com/coderbunker/ansible-docker-nginx-rtmp-role/blob/main/templates/docker-compose.yml.j2
The Docker image and its source code are here:
https://hub.docker.com/r/alqutami/rtmp-hls
https://github.com/TareqAlqutami/rtmp-hls-server

http://localhost:8080/hls/test.m3u8
http://localhost:8080/dash/test.mpd



https://github.com/arut/nginx-rtmp-module/wiki/Control-module
https://www.ffmpeg.org/about.html



Mathieu GP says:
https://www.codegrepper.com/code-examples/whatever/connect+vm+to+cloud+storage+gcp
 
Mathieu GP says:
https://github.com/GoogleCloudPlatform/gcsfuse/blob/master/docs/installing.md
 
Mathieu GP says:
https://github.com/GoogleCloudPlatform/gcsfuse/blob/master/docs/mounting.md
 
Mathieu GP says:
https://github.com/coderbunker/ansible-docker-nginx-rtmp-role/blob/main/templates/vhost.j2
 
Mathieu GP says:
https://canal.facil.services/w/pAT1meH5gL8Czss5Y6sdEJ
 
Mathieu GP says:ffmpeg -stream_loop -1 -re -i '/path/to/your/file.mp4' -c:v copy -c:a copy -strict -2 -flvflags no_duration_filesize -f flv rtmp://live-stage.laquarium.ca:1935/live/YOUR-KEY 
Mathieu GP says:
https://github.com/Novage/wt-tracker
 
Mathieu GP says:
https://github.com/Novage/p2p-media-loader
 
Mathieu GP says:
https://openwebtorrent.com
, 
https://tracker.novage.com.ua
. 

 JohnDoe
git commit -m "AQU-171 #comment my message here. #time 1h" 

https://www.youtube.com/watch?v=TsNnXwq0v3I

https://blog.addpipe.com/flv-to-mp4/
http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nopush

rm -v <directory>/* 

rtmp recording feature
https://github.cobackupm/arut/nginx-rtmp-module/wiki/Debug-log
https://github.com/GoogleCloudPlatform/gcsfuse#other-performance-issues
http://nginx-rtmp.blogspot.com/2014/01/new-execrecorddone-variables.html
http://nginx-rtmp.blogspot.com/2014/01/redirecting-streams-in-version-111.html

cat /etc/shells

which bash

https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/

https://bluesolutions.atlassian.net/browse/AQU-211

********************************88888
mongo db
docker exec -it <container id> bash
mongo

https://motor.readthedocs.io/en/stable/tutorial-asyncio.html


# MongoDB----backup  https://faun.pub/how-to-backup-docker-containered-mongo-db-with-mongodump-and-mongorestore-b4eb1c0e7308


************************
docker cp /mnt/nosql-backup/20220429/data/ rankworks-nosql:/db-resotore

docker exec -i rankworks-nosql /usr/bin/mongorestore db-resotore/
*********************************************************


docker exec -it rankworks-nosql bash

mongo

> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
rankworksDB   0.000GB
> use rankworksDB
switched to db rankworksDB
> show collections
recordings
users

exit  --------exit db
mongodump --out /data/  ----------mongodb backup
exit ------you should be out of the docker container bash terminal and into our host terminal

sudo docker cp rankworks-nosql:/data/ nbc_nosql_backup
# MongoDB restore 
docker cp nbc_nosql_backup/ rankworks-nosql:/data
docker exec -it rankworks-nosql bash
mongorestore data/rankworksDB/ *.bson
mongo

> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
rankworksDB   0.000GB
> use rankworksDB
switched to db rankworksDB
> show collections
recordings
users

# gscfuse
lssudo cp /home/aquaman01/aquarium-livestream/nginx/gcs_key.json /mnt/
sudo nano /etc/fstab
nbc-livesream-nosql-backup /mnt/nosql-backup gcsfuse rw,_netdev,allow_other,uid=65534,gid=65534,key_file=/mnt/gcs_key.json
sudo mkdir nosql-backup
sudo mount /mnt/nosql-backup
sudo reboot

# MongoDB Auto Backup via CronJob -----https://davejansen.com/how-to-dump-restore-a-mongodb-database-from-a-docker-container/
sudo mkdir /mnt/scripts
sudo nano /mnt/scripts/nosql_db_backup.sh
#!/bin/bash
DIR=`date +%Y%m%d`
DEST=/mnt/nosql-backup/$DIR
mkdir $DEST

docker exec -i rankworks-nosql /usr/bin/mongodump --out /data

sudo docker cp rankworks-nosql:/data/ $DEST/data

sudo crontab -e
30 6 * * * bash /mnt/scripts/nosql_db_backup.sh  --------at 6 :30 AM UTC ----at 2:30 Montreal

sudo systemctl enable cron


************************************8

625435c891d1fde97d5113f8

nbc-livestream-recording_5j6j576rwjk58k7_666ttftt6775_en-fr_1545730073


<video controls="" class="cfc-form-width-large ng-star-inserted" sandboxuid="1" src="https://storage.cloud.google.com/nbc-livestream-recording/qian-en-fr-1649364962.mp4?authuser=1"></video>
 


"basename": "nbc-livestream-recording_5j6j576rwjk58k7_666ttftt6775_en-fr_1545730073",
            

http://localhost:8007/docs#/

https://www.youtube.com/watch?v=9f4LUALgyAU




how to reach another container from a dockerized nginx




https://smartshitter.com/musings/2018/06/nginx-rtmp-streaming-with-slightly-improved-authentication/

625f71fc36a1575b0603e66c

https://docs.python.org/2/library/time.html#time.strftime 

rtmp://nbc-livestream.laquarium.ca/live?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjU2MjgzOTVhYzVkODhiZTAzMGJlNmQiLCJleHAiOjE2NTAyMzI2Mjd9.Gu8RpBxgpgrb8xBTdmnDokN0asf2KRrRYZuMhbJnCx0



nbc-livestream-recording-aqu-123-aqu-6578-aqu-en-fr-aqu-Banque+National+Stocks+Meeting-aqu-1545730073


super token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjVmNzFmYzM2YTE1NzViMDYwM2U2NmMifQ.GBAn-ogiV4-dl1bRVaMz_3wX_t1EUB8fArd0xZUX9ko


rtmp auth token


https://cloud.google.com/storage/docs/json_api/v1
https://googleapis.dev/python/google-api-core/latest/exceptions.html


https://www.geeksforgeeks.org/how-to-run-bash-script-in-python/



https://www.youtube.com/watch?v=OzUzrs8uJl8&t=16s
https://lynn-kwong.medium.com/how-to-use-gsutil-and-python-to-deal-with-files-in-google-cloud-storage-fc4f430b3b28

https://cloud.google.com/storage/docs/access-control#Signed-URLs


https://nbc-bnc-stage.laquarium.ca/blue
pass:   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ey

https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/

grep processor /proc/cpuinfo | wc -l

# nginx unitd ---------https://unit.nginx.org/howto/source/#startup-and-shutdown
               ----------------------https://github.com/nginx/unit
unitd --log /var/log/unit.log
unitd --help

pip list

free -h

https://cloud.google.com/products/calculator


{
  "type": "service_account",
  "project_id": "national-bank-staging",
  "private_key_id": "76db21f601cd324a7af170e7374b93ecae422752",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCUvPPI3WmOZS0W\nytDT0a/BV3Esmns8kqos0zRZxeqDlge458eNwPghTz9GbF3krqJoTHrTUiXz6DR2\n4dyAqAshwqTJGSTpLhDRQKhrlL8PyF7BZ6fRTJCo7IrEYDRKRdIbzEhLApPCOWOp\nR0u/n1KObodPbj+ZIW2iq62ev55ZB3sTRmsEB5ka+r2BqVc1S45H/RbBoaq90xAe\n/RFCZ5LNL6xo4svtIIJOylzRi9hD8gbiqsVYKmf83frNghaZn0dE7GuxYKKA/unm\nCyCS0ir98uc7Dz8mh6aMo7nkRsyupMBq2Tv3fG0j62epcvY/SG4hMsVf7jeVQ6JY\nqrLyYKzXAgMBAAECggEASEdgMnrCKmPpWtuZSm3p+ksLYND7VS6yitDh7kQ619IH\nE6hytWSST+GKTqcno5LnskaEI4AWmGX9ZM4SUOUYb8H+QQk6giQUIRPKJGlmxX0p\n6tN73j5WR/iW4KIdlwBB/6cwdF8evbIUx7SxTz/Vpwh4MbXSKxBvDi9eUjgs83bs\n4f9XcSEaosvAcgYuV7jMvQHxbGrJDPghlSY+D0oG6XcClLoZvJgYjxR6JvzTvGlc\n7H/ffgSvCEPJTG738aiLViaxuS1el11qS/qdn/4tzdfTCMJ36QTBiXkzJgy7OEqH\nMMsK45LyO25yCBv1XjQeDT3EffsX+GC1moPLeEiSPQKBgQDKx2ryTlmBlY36907I\nLHhttjFHKsgEwKr1X7xWQJDk/AhhwvERCi3/KB62rJ0Qy1Be9MmW89fSB0G7s+Lw\nc/00iC1mM2MStrtjn8iI0OOz3g/iMyNBN+1pt1pKK7id2btxvNU1s+xCeXlIExlD\nCOa0c7K7oMoLa1nkf5LqdjFTVQKBgQC7xpB1Yc7Xgklq5YTp5Gn/oEWML2ZGWufu\nI+fq5i+lNUJZIZ/MxCNIlBmG2v4WGqJ9QDzbsdSgBhcfoeKKBZ7hzGqnAstssm0V\n1Nktd1RdVFb5JUggKcyc/ltQCCrypxhT25x0FAzPanm7YJcb37iKfncnY9JIW7qh\nFMUmQ20XewKBgQC9rbHdO+q/qxxnMCRSXD6+KVmI/3yf7XU9FzM93yFqAFL613XV\ngZcrAOVR7L7y8auZVxKmkCtGPCGBqa/TSjwEgoks+05mN+WrN9BGIleMbWCgL0OA\nAweiBq9/h8wmY3/R0VgC5u1N9QC8qZjMuqvLChqbJbk42073zVmo1awoDQKBgH/b\n4Ceddut10qoQKOXeW3LtXg3rhJepdL3KAzQGkzDKSChK5fXXJDNabNtPqK3Caxwg\nLpBl0WM5YmtunsPeueYEfCbGl1+nSvIPoeX8mByIvkQd57PG4oWQCPtA5IWf08fe\nBPVhZauiU8uMJLidKJpdLKNMrDYLB9SBQREh3lmbAoGAcuYjAgPuv/Gkfwv0rpbY\nzOvTvsnDzKc7IlVcygAj7Ap7PKIw3lh1BHJws2E9cbGyP4LgCoqxnY1OqTGSNdK/\nwxsH0pAVKKA2KtopGm/52HLN7BTYBndQHyOr4Y/kWnWAWcjIhpG0fXS55H25VKIf\nAYNoepyVuk7juRmINyQFie0=\n-----END PRIVATE KEY-----\n",
  "client_email": "gcsfuse@national-bank-staging.iam.gserviceaccount.com",
  "client_id": "110194428932741377103",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/gcsfuse%40national-bank-staging.iam.gserviceaccount.com"
}

Jean-Christophe Boucher4:18 PM
https://cloud.google.com/storage/docs/moving-buckets#move-buckets
Achref Souilem4:33 PM
blue-bf32533.slack.com
Jean-Christophe Boucher4:57 PM
https://datastudio.google.com/u/0/reporting/1MJ0GHVvcHI6cRHwMKyeSK3r7UoabEHOH/page/WXzW
Jean-Christophe Boucher5:20 PM
Organization Role Administrator
Security Admin
Security Center Admin
Support Account Administrator
Threat Detection Settings Editor
Folder Admin

rtmp://stage.live.nbc.laquarium.ca/live?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjVmNzFmYzM2YTE1NzViMDYwM2U2NmMiLCJleHAiOjE2NTI3ODgyODJ9.G5_pZSGKfLNBetYWRFA3bC36wJk_UHSg2UdnoYZXCfQ
livestream-recording-aqu-5-aqu-64-aqu-en-aqu-test-aqu

rtmp://stage.live.nbc.laquarium.ca/live?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjY4NTFiOTA2OTE2MjdhMDE2ODZmNzAiLCJleHAiOjE2NTI0NDMyNDh9.rtFdrW7Nxe_DQMceLX2IBpwjMxJIpD9zJiRQKLD74bQ
livestream-recording-aqu-5-aqu-64-aqu-en-aqu-test-aqu

1)deepspeech
https://github.com/mozilla/DeepSpeech
2)Kaldi----------- c++
https://github.com/kaldi-asr/kaldi
3)wav2letter
https://github.com/flashlight/wav2letter
4)speechbrain   ---------python
https://github.com/speechbrain/speechbrain
5)coqui stt
https://github.com/coqui-ai/STT

https://tritondigitalcommunity.force.com/s/article/Choosing-Audio-Bitrate-Settings?language=en_US

chrome://webrtc-internals/

tail -n 1024 /var/log/nginx/http_error.log


zip -r conf.zip conf
scp cert.zip prod@production.diginov.tech:/home/prod
openprod956823

// kubernetes install**************************

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B53DC80D13EDEF05
echo "step1"
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
echo "kubeadm install"
sudo apt update -y
sudo apt -y install vim git curl wget kubelet=1.26.1-00 kubeadm=1.26.1-00 kubectl=1.26.1-00
echo "memory swapoff"
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo swapoff -a
sudo modprobe overlay
sudo modprobe br_netfilter

sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
sysctl --system
if (systemctl -q is-active containerd)
  then
    echo "containerd is  still running."
      rm /etc/containerd/config.toml
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      sudo apt update
      sudo apt install -y containerd.io
      mkdir -p /etc/containerd
      containerd config default > /etc/containerd/config.toml
      sudo systemctl restart containerd
      sudo systemctl enable containerd  
  else
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt update
    sudo apt install -y containerd.io
    mkdir -p /etc/containerd
    containerd config default > /etc/containerd/config.toml
    sudo systemctl restart containerd
    sudo systemctl enable containerd   
fi
sudo systemctl enable kubelet
sudo kubeadm config images pull --cri-socket unix:///run/containerd/containerd.sock --kubernetes-version v1.26.1

/// -----------master node only-----
sudo kubeadm init   --pod-network-cidr=10.244.0.0/16   --upload-certs --kubernetes-version=v1.26.1  --control-plane-endpoint=35.203.64.219 --ignore-preflight-errors=all  --cri-socket unix:///run/containerd/containerd.sock

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

export KUBECONFIG=/etc/kubernetes/admin.conf

kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml

kubectl get pods --all-namespaces


// the scheduler will then be able to schedule Pods everywhere
kubectl taint nodes --all node-role.kubernetes.io/control-plane-
// 
kubectl taint node kmaster-montreal-a node-role.kubernetes.io/control-plane:NoSchedule

// also run this to enable systemdcgroup (mandatory if its ubuntu 22.04)
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

kubectl get nodes -w
kubectl get nodes
kubectl run nginx --image=nginx
kubectl get pods
kubectl describe pods
kubectl get pods -owide
kubectl get pods -A
kubectl cluster-info
kubectl get ns    \\ namespaces
kubectl proxy


//kubenetes dashboard install
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
kubectl -n kubernetes-dashboard get pods -o wide
kubectl -n kubernetes-dashboard get svc / kubectl -n kubernetes-dashboard get services
kubectl -n kubernetes-dashboard edit svc kubernetes-dashboard
nslookup <domain>


ls /etc/kubernetes/manifests/

------ in -site ----
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join 35.203.64.219:6443 --token 22cj06.6wruhmku982eb7dv \
        --discovery-token-ca-cert-hash sha256:c588403998d2219127876552654ae367aa88c14d8ff2caae8f42f8dae91fccbc \
        --control-plane --certificate-key 0d17d12441dcc87cdfa0a12b45e2dc74fae4fd22c354097a742c9fb07a097328

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 35.203.64.219:6443 --token 22cj06.6wruhmku982eb7dv \
        --discovery-token-ca-cert-hash sha256:c588403998d2219127876552654ae367aa88c14d8ff2caae8f42f8dae91fccbc



# install helm 

curl -o /tmp/helm.tar.gz -LO https://get.helm.sh/helm-v3.12.3-linux-amd64.tar.gz
tar -C /tmp/ -zxvf /tmp/helm.tar.gz
mv /tmp/linux-amd64/helm /usr/local/bin/helm
chmod +x /usr/local/bin/helm


# NGINX Ingress Controller
# https://github.com/marcel-dempers/docker-development-youtube-series/blob/master/kubernetes/ingress/controller/nginx/README.md
# First thing we do is check the compatibility matrix to ensure we are deploying a compatible version of NGINX Ingress on our Kubernetes cluster https://github.com/kubernetes/ingress-nginx/
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm search repo ingress-nginx --versions

CHART_VERSION="4.7.0"
APP_VERSION="1.8.2"

mkdir ./kubernetes/ingress/controller/nginx/manifests/
cd kubernetes/ingress/controller/nginx/manifests/


helm template ingress-nginx ingress-nginx \
--repo https://kubernetes.github.io/ingress-nginx \
--version ${CHART_VERSION} \
--namespace ingress-nginx \
> /home/rankman/vm-rankworks/kubernetes/ingress/controller/nginx/manifests/nginx-ingress.${APP_VERSION}.yaml

# Deploy the Ingress controller
kubectl create namespace ingress-nginx
kubectl apply -f /home/rankman/vm-rankworks/kubernetes/ingress/controller/nginx/manifests/nginx-ingress.${APP_VERSION}.yaml

# Check the installation
kubectl -n ingress-nginx get pods


# secret/tls-secret
cd /home/rankman/vm-rankworks/nginx
kubectl create secret tls tls-secret --key privkey.pem --cert fullchain.pem
kubectl get secret


cat privkey.pem | base64 -w0
LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRRHJlS1NrdXpxcFBpYXEKdkwrNUdNYUQ4eUdOZDEydUVEL2xydEg3KzJvVGJESjNrQWIva0tCOU9RZWYzdWlVU2d0TmFxNnZ5N0RKZ1pWVwpwSXBlMlBaWWNWWG92R3NHSHBzbFBBM3ROS056ODJZT3RhUDg1NmEySFpkbndNTEx0OTFZUlBEWkM1aDFvSlU3CkZyMmdWQ3h1M2NLVGlDSnV4R05qeW1zeG1FUTBGT1l5VlE2VlZ0VmdCZFVXSkMwbEkvWk1yZjZINys1U1VZbnkKbXQ5RjlaTVBTY1BnMFBvbzAzU0IwQ2tmM1JSZjBoYkcrOFN3RVd1RW1vOXc3RUg0T3BnajBLekxCNDVHajhZdgpNTFlzZFdZUk9TTktYNFRRbmpHaXc2WVpobnJEUVBnYUVSRGRDWGkvM1M2UHNzaGE2SjB6c0ZHNUhrdlVNeHhjCkZzUkJuODA3QWdNQkFBRUNnZ0VBYU5udlFuVW1rVjhkKzdBUmxUdmRoYnI1U1ZPS01PeUdiMkdSbW1sZzJpWTMKTUxzL0NvVGRtZlVQbXBZNUxYTHRKbnRuTHR0K0xMUlppZHU1eTdORHVxMDQ2bW9nSS9qejc3Z1dvWFhyaE1Hdwp3OE1KTXgvNXdhVmFtbllncDNNSGluc2tYaG1HT1hhWWpOZTY5NDRUdlFoZFVMRnhWNjUyYldTZ3A5UmNKbTMvCk1kUjlEUUc5bng4aVBkWjdWSmJKc3dDa0t3NVRid0RxYnlvOGt1RWIzcVlvY1NXVE5zN01TVGJsS2xxaWdqcVgKa3BGN01MWTdaNVNPblA0VmNHL0FoTzNLNG9RNmh3VmZWK29YSTRrdytPRzRTaExSVTlodDk0QzdtcHA4VEpHZQpBWGY5ZlZFSUd1VnZ0b2o3SS8xQnJlc29IYlRrd1dGVU91bUg5SytlTFFLQmdRRDlUdTNFS3Y0SlhrZVljWnNECmlvOUs4bGZ4NVJobmdJaGx4SnpuL05CT3NSZkJHSE5sVW4yZ1paTjZzekhoc3FEN0Uza0o5dnQvNEhwU2IvWk8KSFZ0bHQvdXYyQi9nVStSM21IU2M4RkN2WHVLekU1TVhiUHdZdmlRVTNyNVpFYkM5U2VWQWs3UWMxLzEvbUZ5eApRR0RobDNKck5Hc2RBU0l5WlVqcFhxcVhKUUtCZ1FEdCtURkZleUozNm4xYmlPK1ltK0hrL0NCbFh4TkhvUTV6CjArbFBMZmkxdjZ0Zkgxb3lURkc5WThVVFM4Q0w5NmZCbzE1M2EycG9BQUlZUGg2OFo1SUZ0ekE2RTVPazRrVWsKQVZIY05YRmJuZU0yTEdUQWRUTzNUUWpwOUhVS1hPeC9PbXdaRmZRUzhTNVBNYVlrSFFPQldmV0pheFNDSjhJZQprd1pYYjFaVTN3S0JnUUQ3R3U0Nnc3KzIrNzRQa2Jid1NNQUp0TG1Yc3RxQlovcE9vQnhISU9oQ3llMVpYdXF0CjY1dGJrTFlsTVZSbWY1UnpzUGNRK01TU0hLNUY0SFdUTkNqeGFmUlhlZkVIaVVKM2lDczVsRVQzeENFSkVvT0MKK21maUEwTnphT2ZiRmQxVmw5WnFNTUdnd2tDcTV4Z2tJa1NuL1dEUWcxTVhtcE1TMERMNkhQMFEvUUtCZ1FDTgpGMW1uSUVKblpwZThWWXY0cHpOZldEeTgzWW5JeGl5VGIraThFVDJNUkgrT2ZrQXo0aHYwZGRxNmZnZEM5U3A1CkhDcytFbW1jRDZVdVNtWmV2ZWxOaWpjRnQrV3B0SjNab3c2dHlPSFV0OSttbHR1RlgvZXhqZkxqQXhVQmQrYWYKNkR0L0JBMFp6ZlR1N3pqWjRIbmJqMEtNbnZnaDB3QzhyOTdxcUJBL2NRS0JnUUNvWVBzdUZOMTBkbi9sbzl2SgpHdkZYNXJnNHhRcnFiM1RWaElwdmZZUnFaNkM1U096bWx0cDYvRkJKUGNtaVpRWHgwd0RCUTMwL0xBSVVlMFEvClJESE1rZHJrejdMWjZUTFBHWXlxM1lXUHZMSXppVUh0aEUvNkpLNFQ3R2NZL1h2YkdPR3J6MTBRRy9lTy9tWjIKYmw5SzdBZzRKem1kMm9PS1MxWHhROEcwa1E9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t

cat fullchain.pem | base64 -w0
LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdjRENDQlZpZ0F3SUJBZ0lVRnROTElGQXFmakxiaVovVjhUVTk4V2pyQzNNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZc3hDekFKQmdOVkJBWVRBbFZUTVJrd0Z3WURWUVFLRXhCRGJHOTFaRVpzWVhKbExDQkpibU11TVRRdwpNZ1lEVlFRTEV5dERiRzkxWkVac1lYSmxJRTl5YVdkcGJpQlRVMHdnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5CmFYUjVNUll3RkFZRFZRUUhFdzFUWVc0Z1JuSmhibU5wYzJOdk1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGgKTUI0WERUSXlNVEV5TXpFMU16WXdNRm9YRFRJek1ESXlNVEUxTXpZd01Gb3dZakVaTUJjR0ExVUVDaE1RUTJ4dgpkV1JHYkdGeVpTd2dTVzVqTGpFZE1Cc0dBMVVFQ3hNVVEyeHZkV1JHYkdGeVpTQlBjbWxuYVc0Z1EwRXhKakFrCkJnTlZCQU1USFVOc2IzVmtSbXhoY21VZ1QzSnBaMmx1SUVObGNuUnBabWxqWVhSbE1JSUJJakFOQmdrcWhraUcKOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTYzaWtwTHM2cVQ0bXFyeS91UmpHZy9NaGpYZGRyaEEvNWE3UgorL3RxRTJ3eWQ1QUcvNUNnZlRrSG45N29sRW9MVFdxdXI4dXd5WUdWVnFTS1h0ajJXSEZWNkx4ckJoNmJKVHdOCjdUU2pjL05tRHJXai9PZW10aDJYWjhEQ3k3ZmRXRVR3MlF1WWRhQ1ZPeGE5b0ZRc2J0M0NrNGdpYnNSalk4cHIKTVpoRU5CVG1NbFVPbFZiVllBWFZGaVF0SlNQMlRLMytoKy91VWxHSjhwcmZSZldURDBuRDRORDZLTk4wZ2RBcApIOTBVWDlJV3h2dkVzQkZyaEpxUGNPeEIrRHFZSTlDc3l3ZU9Sby9HTHpDMkxIVm1FVGtqU2wrRTBKNHhvc09tCkdZWjZ3MEQ0R2hFUTNRbDR2OTB1ajdMSVd1aWRNN0JSdVI1TDFETWNYQmJFUVovTk93SURBUUFCbzRJQzhqQ0MKQXU0d0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjRApBVEFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JCUzhBd21WdHFFK2FpVmdNOTNxcnBtS0NBRTJlakFmCkJnTlZIU01FR0RBV2dCUWs2Rk5YWFh3MFFJZXA2NVRidXVFV2VQd3BwREJBQmdnckJnRUZCUWNCQVFRME1ESXcKTUFZSUt3WUJCUVVITUFHR0pHaDBkSEE2THk5dlkzTndMbU5zYjNWa1pteGhjbVV1WTI5dEwyOXlhV2RwYmw5agpZVENDQWZFR0ExVWRFUVNDQWVnd2dnSGtnaFJoY0drdVlta3VjbUZ1YTNkdmNtdHpMbU52YllJYVlYQnBMbUoxCmMybHVaWE56TG5KaGJtdDNiM0pyY3k1amIyMkNGV0Z3YVM1d1lYa3VjbUZ1YTNkdmNtdHpMbU52YllJVllYQnAKTG5OemJ5NXlZVzVyZDI5eWEzTXVZMjl0Z2hCaWFTNXlZVzVyZDI5eWEzTXVZMjl0Z2haaWRYTnBibVZ6Y3k1eQpZVzVyZDI5eWEzTXVZMjl0Z2hoa1pYWXVZWEJwTG1KcExuSmhibXQzYjNKcmN5NWpiMjJDR1dSbGRpNWhjR2t1CmNHRjVMbkpoYm10M2IzSnJjeTVqYjIyQ0dXUmxkaTVoY0drdWMzTnZMbkpoYm10M2IzSnJjeTVqYjIyQ0ZHUmwKZGk1aWFTNXlZVzVyZDI5eWEzTXVZMjl0Z2hWa1pYWXVjR0Y1TG5KaGJtdDNiM0pyY3k1amIyMkNGV1JsZGk1egpjMjh1Y21GdWEzZHZjbXR6TG1OdmJZSVJjR0Y1TG5KaGJtdDNiM0pyY3k1amIyMkNFWE56Ynk1eVlXNXJkMjl5CmEzTXVZMjl0Z2hwemRHRm5aUzVoY0drdVlta3VjbUZ1YTNkdmNtdHpMbU52YllJYmMzUmhaMlV1WVhCcExuQmgKZVM1eVlXNXJkMjl5YTNNdVkyOXRnaHR6ZEdGblpTNWhjR2t1YzNOdkxuSmhibXQzYjNKcmN5NWpiMjJDRm5OMApZV2RsTG1KcExuSmhibXQzYjNKcmN5NWpiMjJDRjNOMFlXZGxMbkJoZVM1eVlXNXJkMjl5YTNNdVkyOXRnaGR6CmRHRm5aUzV6YzI4dWNtRnVhM2R2Y210ekxtTnZiVEE0QmdOVkhSOEVNVEF2TUMyZ0s2QXBoaWRvZEhSd09pOHYKWTNKc0xtTnNiM1ZrWm14aGNtVXVZMjl0TDI5eWFXZHBibDlqWVM1amNtd3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQURqVC9BNk5WSjRndFZIMXRBQXpWaG5LNlp2VFZNc3JGMi9oVWVrS01ybHlKa2sydGV2MHVsRTdGU3k2CkltRDVXTVljdDN0d0Evb3B3M1k0ajcrZVc3Y0w2RDc4TlA2RC8yWlZWVDhRcFhVOUtUZUl0MmpETmNiT3UzNmsKVEdzdVRXT0FSckgxclFBTW5lWlIzMUhGa1p5QUhZUytpa0NicG8vNlJDL1VHbmpGZC9pRUlXWmlpWmp2YXl0NwptVzlTSkVNekJWR0Nvb21KTUIrY3Z2cHFsaWtZVDJ3WWdnSmJSc1FScnRtanVtMy9QU2xRLzlFU01meCtwYTMrCklNOVVuNVozV04wV0lVdlFsc2JwendFUUFxMUk3T0pQdm5zZzZKNnRtNW9JVGhNWXdteE56endZSzdLZ2Q5NGMKMS9sRldPb3NDVmV4bzIzOElZajQ0V2xrSWlzPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t

kubectl describe secret tls-secret

https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/docs/examples/http-svc.yaml

kubectl get po

# install google client cli ---------https://cloud.google.com/sdk/docs/install#linux
-------------------------------------https://cloud.google.com/artifact-registry/docs/docker/authentication
# for Linux 64-bit(x86_64)
cd /home/rankman
curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-447.0.0-linux-x86_64.tar.gz
tar -xf google-cloud-cli-447.0.0-linux-x86_64.tar.gz 
./google-cloud-sdk/install.sh
./google-cloud-sdk/bin/gcloud init


# Set up authentication for Docker
cd /home/rankman/vm-rankworks/in-site/api
gcloud auth activate-service-account in-site-server@insite-369020.iam.gserviceaccount.com --key-file=server_secret.json

gcloud auth configure-docker northamerica-northeast1-docker.pkg.dev


###Choosing an authentication method 1) 2) or 3) 
options 1) Standalone credential helper
VERSION=2.1.14
OS=linux  # or "darwin" for OSX, "windows" for Windows.
ARCH=amd64  # or "386" for 32-bit OSs

curl -fsSL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${VERSION}/docker-credential-gcr_${OS}_${ARCH}-${VERSION}.tar.gz" \
| tar xz docker-credential-gcr \
&& chmod +x docker-credential-gcr && sudo mv docker-credential-gcr /usr/bin/

docker-credential-gcr configure-docker --registries=northamerica-northeast1-docker.pkg.dev
echo "https://northamerica-northeast1-docker.pkg.dev" | docker-credential-gcr get

options 2)Access token
gcloud auth print-access-token \
    --impersonate-service-account in-site-server@insite-369020.iam.gserviceaccount.com | docker login \
    -u oauth2accesstoken \
    --password-stdin https://northamerica-northeast1-docker.pkg.dev

gcloud auth print-access-token | docker login -u oauth2accesstoken \
    --password-stdin https://northamerica-northeast1-docker.pkg.dev

options 3)Service account key
cat server_secret.json | docker login -u server_secret.json --password-stdin https://northamerica-northeast1-docker.pkg.dev
